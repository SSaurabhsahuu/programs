In JavaScript we have Number, String, Boolean , Object            all start with CAPITAL

we use let, Const    ( var   was used before 2015 but it is still used in old websites )
a=10  			does not has let / const keyword still it will work but it can create problems in future so avoid it    

'use strict'	it makes some error visible 
		like if we make a variable 	let myname='sks'
						if(my_name==='sks')  console.log("true"); 	then it will not show any error
						but with strict mode on 		an error that my_name is not defined will show in console 
Right to left 		let x = y = 20 - 4 - 10		output - x=6  y =6					
Type Conversion   let a="1234";
		      a=Number(a);

Type Cohesion   let a = '14' - '10'        output  4     ( Type Number )             
		    a = '14' + '10'        output  1410  ( Type String )    
		    a = '14' - '10' + '5'  output  9     ( Type String )    left to right 
		    a = '14' * '10'        output  140   ( Type Number )
		    
	        let a = '1'+ 1;
		    a = a - 1;          
		output  10   ( Type Number ) 
		for - , * , / , conditional operator    we get Number   and for  +  we get String

'a'.charCodeAt(0)		converts 'a' to ASCII value
String.fromCharCode(97)		converts ASCII value to Character

eg. Capitalize a character
	car='d'
	car = String.fromCharCode('A'.charCodeAt(0) +car.charCodeAt(0)-'a'.charCodeAt(0))
	output   car = 'D'
   or	
	car = car.charAt(0).toUpperCase()

 ===    Strict equality   18 === 18   True      we always use this
 ==     loose            '18'== 18    True      it has type cohesion  
 
False     if(0)  if('')  if(undefined)  if(NaN)  if(null)		!0 , !'' = true	

Template Literal    we use this  sign  `  `
 	let name = "	Sks";
	console.log( `Hello  ${name}  we use template literals to print exact what is inside 
			otherwise we have to use + operator to join and add proper space and 
			otherwise use \n\ to change line 
		   `)
Ternary operator  (three operators)( one line if else )
        let age = 23;
	let b = age >= 18 ? 'Drink' : 'No Drink';
	console.log(b);          output    Drink

7 primitive data types		string, number, bigint, boolean, undefined, symbol, and null
Non-Primitive			array, Object
(	https://www.geeksforgeeks.org/primitive-and-reference-value-in-javascript/?ref=rp	)


const		 
		primitive data types	 variables cannot be reassigned
					 const a=5    then  a=6 is invalid		
		Non-Primitive 		 variables cannot be reassigned but its members can be modified	
					 const a=["1","2","3"]
					 a=["5","4","3"]      is invalid
					 a[1]=5  & a.push(10) is valid
					 
		https://www.w3schools.com/js/js_const.asp
	
Pass By Value		all primitive data type			
Pass By Reference	only Arrays  and  Object 	( no way to pass by reference primitive data type )
(  https://stackoverflow.com/questions/13104494/does-javascript-pass-by-reference )

identifier		address		Value			Address		Value
age	------------>	001		30	
newAge	------------>	002		31		

me	-------->--->	003		D30f	----------->	D30f		{ name:"sks";
friend	-------/								  age:30; 
										 }							
			--- Stack -----				----- Heap --------

	   https://www.udemy.com/course/the-complete-javascript-course/learn/lecture/22648509#overview

All primitive data types are Immutable
Immutable	if any primitive object is created ( at address 2055 )
		so the value at this address cannot be changed
		but the reference to this object can point to new address
		let a=10	a-> memory address ( 2055 ) holding value 10
		a=20		a-> memory address ( 3000 ) holding value 20		
		memory address ( 2055 ) still holds value 10 	but memory is deallocated automatically by garbage collection algorithm

Memory Management	for memory optimzation javascript compiler gives one memory to 2 variables having same value
			
			Primitives	( immutable )
			let a=b=5				both point at same address
			b=1
			output	a=5  b=1			both point at diff address
			if not immutable then it would be bad as changing one variable will change value of other variable
			
			Non-Primitives	( mutable )
			let a=b=['1','2','3']					both point at same address
			b[0]=4
			output	a=['4','2','3']		b=['4','2','3']		both point at same address
 
string		In javaScript strings are immutable ( str[4]='g'   will not change str )
		so to change ith element of string 
			chr ='x'
			str=str.slice(0,i) + chr + str.slice(i+1);

		str="hello"
		str="world"
		console.log(str)	world		memory address holding value "hello" will be deallocated by garbage collector

		str.slice(0,4)		returns a string from 0  index to 3rd index of str
		str.slice(5)		returns a string from 5th index to last index of str

Functions 	can be made in 3 ways in javaScript
		Function Declaration		function test(a,b){ some code }			test(4,10)
		Function Expressions		const test= function (a,b){ some code )		let x=test(4,10)
		Arrow functions			const test= (a,b) => a-b ;			let x=test(4,10)	
						const test= (a,b) => { some code  return}	let x=test(4,10)

Array		let arr = ['sks',23,'saurabh'];			        a array in JavaScript can hold differnt data types at one time 
	or	const arr = new Array('sks',23,'saurabh');		if we do arr.push(34) its legal		but if we do arr=['mmm',34] not legal because of const
		
		arr.push(34)		push element at last		returns index of element
		arr.unshift(34)		push element at first
		arr.pop()		pop element at last		returns element deleted
		arr.shift()		pop element at last
		
		arr.indexOf('saurabh')	o/p	2		arr.indexOf('sksksk')	o/p	-1

Objects		let obj_list = {
			first :'Saurabh',
			last :'Sahu',
			birthyear :1923,
			friends : ['aaa','bbb','cccc']
			
			age: function(){						// function Expression is used   &  function Declaration cannot be used
				return console.log(2021 - this.birthyear)
				}

			};
	
		To access elements 	   	obj_list['first']	or 	obj_list.first 
		To make a new data member	obj_list.hobbies = ['games','books','coding']	or   obj_list['hobbies']=
		to make a new member function	obj_list.fun = function (){ some code }

Prettier
snippets   	 alias code
todohighlighter
live server	 no need of manual refreshing


windows key + .   ->  emoji

DOM ( Document Object Model )
	is a web API that can be used by javaScript
	Document is the highest class head & body are elements of it
			Document
		head		 body
		title	   section	section
			 <p>	  <a>	div	img

document.querySelector(".someClass")	 =	<div class="someClass">hello</div>
	
document.querySelector(".some").textContent	div, p
document.querySelector(".some").value		input

document.querySelectorAll(".some")		returns all elements with .some class

Class Manipulation
document.querySelector(".some").classList.add("anotherClass")	add class
								remove class
								contains
							
document.addEventListener('keydown', function (e) { some code });	// e is as event object that is passed by javaScript
                            						// as an argument , we just give the event a name 'e'
                            						// and use it 



JavaScript Theory
			JavaScript is a Just in Time Compilation (JIT ) Language. It is no more an interpreted Language as before 
			
			JavaScript code  --->   compiler   --->  Machine code ( immediately executed )
						   |		   |
	 					   |		   |
						   ---<<------<<---
                                             less optimized Machine code is then optimized which makes Javascript fast
			
			In compiled languages optimized Machine code file is generated but in JIT no file is created 


let is block scoped
var is function scoped
function is block scoped (only in strict mode ) 

Hoisting	use variables before they are declared

				Hoist		value defore declaration
function declaration		yes		same as in declaration
var				yes		undefined
let & const			No		uninitialized & is stored in TDZ ( Temporal Dead Zone )
function expression & arrow	depends on keyword used if let & const then Hoist = No 

console.log(firstName)		error:	cannot access firstName before initialization	
let firstName="sks";
console.log(lastName)		error:	lastName is not defined

console.log(lname);		undefined	( no error )  Thats why let & const were introduced so that bugs can be caught easily
var lname="s";

This keyword
		function inside object		this = Object that is calling the function
		simple function (global )	this = undefined	( in strict Mode otherwise window Object of Browser )
		Arrow function 			this = this of parent function ( if no parent then window object)
		Event Listener			this = DOM element


Creating new object at different address by coping a object
					Shallow copy	const newCopy= Object.assign({}, original_object);

