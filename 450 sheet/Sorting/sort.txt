Swaps are more costly than comparison

Stable Algo	if we have a array in which dublicate elements are present & after applying our algorithm the index of duplicates changes
		like the duplicate present in lower index goes above the next dublicate
		arr = { 3,9,7,3,1 }
		index	0     3
		Applying Selection sort makes 1,3,3,7,9	
					index   3 0
		so Selection sort in Unstable

swap(a,b)	swaps 2 values

comparison based sort		Bubble, insertion, selection			O(n^2)    average
			 	merge, quick sort				O(nlogn)  average
Non comparison based sort	is Data specific ( when range is small )  	O(n) time complexity
				Count sort  ( when range is small ) 
				Bucket sort ( when data laies in between interval ) 
				Radix sort  ( bitwise sorting ) 

1) https://leetcode.com/problems/sort-colors/
2) https://leetcode.com/problems/sort-characters-by-frequency/
3) https://leetcode.com/problems/custom-sort-string/
4) https://leetcode.com/problems/rank-teams-by-votes

Sort by first
5) https://leetcode.com/problems/merge-intervals/
	https://leetcode.com/problems/insert-interval/
	https://leetcode.com/problems/partition-labels/
	
	

sort by end
6) https://leetcode.com/problems/non-overlapping-intervals
	

practice
https://leetcode.com/problems/queue-reconstruction-by-height/
https://leetcode.com/problems/pancake-sorting/
https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/

7) https://leetcode.com/problems/merge-sorted-array/

Merge sort 	O(nlogn) time compleity for best, average, worst case
		O(n) space complexity due to using extra array for storing
		O(1) space complexity in case of +ve integers

		stable
		not in place ( as extra n length array is used )
		Application-	
				1) used to sort linked list
				2) inversion count
				3) algo where divide & conquer strategy can be used

Quick sort	pivot can be selected in any way 1st, last, middle, random
		2 pointers can also be selected in 2 ways - 1st & last index	or	both 1st index		but logic remains same
		
		Best case	O(nlogn)	when equal partition is made 
		Worst case	O(n^2)		when 0 & n-1 partition is made ( sorted or reverse sorted )
		
		Space complexity	O(1)
		not Stable
		Inplace

Randomized Quick sort	O(nlogn)	best,average,worst case












