// Subsequence / Combinations
// Given a array, we have to find out all subsequences of it
// that is generated by deleting some character of a given string without changing its order
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// The vector v stores current subset.
void subsequence(int arr[], int n, vector<int> v,int *c)
{
	// If no remaining elements, then print all
	// elements of current subsequence.
	if (n == 0) {
        reverse(v.begin(),v.end());     //  reverse vector v
		for (auto x : v)
			cout << x << " ";
		cout << endl;
		(*c)++;
		return;         // we can also start from index 0 instead of n-1 in subsequence(arr, n - 1, v,c);
	}

	subsequence(arr, n - 1, v,c);      // excluded last element
	v.push_back(arr[n - 1]);
	subsequence(arr, n - 1, v,c);      // included last element
}

// Wrapper over printAllSubsetsRec()
void printAllSubsets(int arr[], int n)
{  int c=0;
	vector<int> v;
	subsequence(arr, n, v,&c);
	cout<<"\n Total no. of subsequences / Combinations "<<c;   // c = 2^n
}

int main()
{
	int arr[] = { 1,2,3,4,4};

	int n = sizeof(arr) / sizeof(arr[0]);
	printAllSubsets(arr, n);
	return 0;
}
